{"name": "Getting Started",
 "languages": [
	{"name": "OMeta JS",
	 "meta": true,
	 "code": [
		{"name": "BSOMetaJSParser",
		 "startRule": "topLevel"},
		{"name": "BSOMetaJSTranslator",
		 "startRule": "trans",
		 "makeList": true}]},
	{"name": "math",
	 "code": [
		{"name": "math",
		 "startRule": "expression",
		 "defView": "Grammar"}]},
	{"name": "calculate",
	 "code": [
		{"name": "calculate",
		 "startRule": "le",
		 "makeList": true,
		 "defView": "Grammar"}]},
	{"name": "LET",
	 "code": [
		{"name": "LET",
		 "startRule": "let",
		 "makeList": true,
		 "defView": "Grammar"}]},
	{"name": "raw",
	 "code": [
		{"name": "raw",
		 "startRule": "it",
		 "defView": "Grammar"}]}],
 "views": [
	{"name": "Read Me First",
	 "language": "raw",
	 "editor": {"name": "ACE", "height": "100px", "readOnly": true},
	 "contents": "Welcome to the Language Workbench for Language of Languages (LoLs).\nSelect a workspace and interact with it using the language areas below.\nEach area displays the workspace according to a selected language.\nChanges in one area update all other areas and the Language Element\nTree (LET) which defines the LoLs workspace."},
	{"name": "Math Problem",
	 "language": "math",
	 "editor": {"name": "ACE"},
	 "contents": "2+3*4"},
	{"name": "Answer",
	 "language": "calculate",
	 "inputView": "Math Problem",
	 "editor": {"name": "ACE", "readOnly": true},
	 "contents": "14"},
	{"name": "LET Explorer",
	 "language": "LET",
	 "inputView": "Math Problem",
	 "editor": {"name": "ACE", "height": "200px", "readOnly": true},
	 "contents": ".+. Add\n  2 Number\n  .*. Multiply\n    3 Number\n    4 Number\n"},
	{"name": "Grammar",
	 "language": "OMeta JS",
	 "editor": {"name": "ACE", "height": "250px", "gutters": true},
	 "contents": "ometa math {\n  expression = term:t space* end           -> t,\n  term       = term:t \"+\" factor:f         -> Le('Add', t, f)\n             | term:t \"-\" factor:f         -> Le('Subtract', t, f)\n             | factor,\n  factor     = factor:f \"*\" primary:p      -> Le('Multiply', f, p)\n             | factor:f \"/\" primary:p      -> Le('Divide', f, p)\n             | primary,\n  primary    = Group\n             | Number,\n  Group      = \"(\" term:t \")\"              -> Le('Group', t),\n  Number     = space* digits:n             -> Le('Number', n),\n  digits     = digits:n digit:d            -> (n * 10 + d)\n             | digit,\n  digit      = ^digit:d                    -> d.digitValue()\n}\n\nometa calculate {\n  le     = ['Number' anything:n]  -> n\n         | ['Group' le:x]         -> x\n         | ['Add' le:l le:r]      -> (l + r)\n         | ['Subtract' le:l le:r] -> (l - r)\n         | ['Multiply' le:l le:r] -> (l * r)\n         | ['Divide' le:l le:r]   -> (l / r)\n}\n\nometa LET {\n  let = ['Number' anything:n]:x    -> (sp(x)+n+' Number\\n')\n      | ['Group' let:e]:x          -> (sp(x)+'(.) Group\\n'+e)\n      | ['Add' let:l let:r]:x      -> (sp(x)+'.+. Add\\n'+l+r)\n      | ['Subtract' let:l let:r]:x -> (sp(x)+'.-. Subtract\\n'+l+r)\n      | ['Multiply' let:l let:r]:x -> (sp(x)+'.*. Multiply\\n'+l+r)\n      | ['Divide' let:l let:r]:x   -> (sp(x)+'./. Divide\\n'+l+r)\n}\n\nfunction sp(node) {\n  var s=\"\", i=node.depth();\n  while (i-- > 1) {s=s+\"  \"};\n  return s;\n}\n\nometa raw {\n  it = anything*\n}"}],
 "currentView": "Math Problem"}